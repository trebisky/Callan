#! /usr/bin/python3

# hexfix
#  Tom Trebisky  1-22-2022 2-18-2022
#
# clean up various unpleasant issues in the disassembly
# generated by objdump.
# As an incidental benefit, we get rid of some trailing whitespace.
#
# more importantly, we convert a bunch of constants that are
# displayed in decimal to good old hex.
#
# We look for a # followed by a digit or - sign
# interestingly we never see #0x
#

import re
import sys

# split on #, then on ,
def process ( thing ) :
    t = thing.split("#")
    tt = t[1].split(',')

    h = tt[0]
    ival = int(tt[0])
    if ival < -9 or ival > 9 :
        h = hex(ival)
        # strip silly leading "-"
        if h[0] == '-' :
            h = h[1:]

    #print ( tt[0] )
    #print ( h )

    return t[0] + "#" + h + "," + tt[1]
    #return t[0] + "#" + tt[0] + "," + tt[1]

# When developing we return None
def debug ( l ) :
    #return None
    return l

def scan ( line ) :
    if line.startswith(";") :
        return debug ( line )

    # linkw had decimal constants, but we don't mind
    # in that case.  And they are at the end of the
    # line as in:  linkw %fp,#-4
    if "linkw" in line :
        return debug ( line )

    # this is typically trap #7 or some such
    if "trap" in line :
        return debug ( line )

    # Python is happy either way.
    #if not ", [" in line :
    if "#" not in line :
        return debug ( line )

    # lines have 3 sections split up by tabs
    # the address, the hex, the disassembly
    # we only want to work on the last of these
    lt = line.split('\t')
    if len(lt) != 3 :
        return debug ( line )

    # it turns out that every thing with a #constant is
    # followed by a comma, the only case with
    # an immediate at the end is linkw and we
    # already return with that.
    #x = re.search ( "#.*,", lt[2] )
    #if ( x != None ) :
    #    return None

    lt[2] = process ( lt[2] )

    return "\t".join(lt)

# This is to fix ridiculous long strings
# of leading zeros like the following:
#   movel %a1@(0000000000000032,%d2:l:8),%d0
#   movel %a0@(0000000000000000,%d7:l),%d0

def scan2 ( line ) :
    l1 = re.sub ( '\(0+(\d)', '(\\1', line, 4 )
    l2 = re.sub ( '\(0+', '(', l1, 4 )
    return l2

# infile = "callan13.dis"

if len(sys.argv) != 2 :
    print ( "usage: hexfix infile" )
    exit ()

infile = sys.argv[1]
#print ( infile )

with open ( infile ) as f:
    for line in f:
        fix1 = scan ( line.rstrip() )
        fix2 = scan2 ( fix1 )
        print ( fix2 )

