#!/bin/python3

# First do: dnf install python3-pyserial

# This was originally written for EBAZ4205 reverse engineering.
# It was copied from: /u1/Projects/EBAZ4205/Grab/grab
# It was modified later for the Rockchip RK3399
# It was copied from: /u1/Projects/Rockchip/Ram/grab2

# Now being used with the Callan 2-25-2022

# Working on this has exposed a couple of shortcomings in Python serial
#
# one is that it doesn't play nicely with a thread writing
#  while a read is blocked on the serial port
#  We work around this one with a message queue
#
# the other is some mischief involving \r and \n when reading.
#  this makes for some garbled output in terminal mode.
#  At this point we just put up with it.

import os
import sys
import serial
import threading
import tty
import queue
import time
from subprocess import Popen, PIPE

device = "/dev/ttyUSB1"
baud = 9600

# ========================================================
# ========================================================

# Now and then we get this:
#  UnicodeDecodeError: 'ascii' codec can't decode byte 0xff
#   in position 0: ordinal not in range(128)
#  So .. don't try to decode it
def flush () :
    n = 0
    while True :
        n += 1
        #c = ser.read().decode('ascii')
        c = ser.read()
        if len(c) == 0 :
            break
    return n

def flush_to ( term ) :
    while True :
        c = ser.read().decode('ascii')
        if c == term :
            break
        if len(c) == 0 :
            break

def read_to ( term ) :
    rv = ""
    while True :
        c = ser.read().decode('ascii')
        if len(c) == 0 :
            break
        rv += c
        if c == term :
            break
    return rv

def read_until ( sterm ) :
    rv = ""
    slen = len(sterm)
    while True :
        c = ser.read().decode('ascii')
        if len(c) == 0 :
            break
        rv += c
        if len(rv) < slen :
            continue
        if rv.endswith ( sterm ) :
            break
    return rv

# same as read_until, but discard result
def flush_until ( sterm ) :
    read_until ( sterm )

def probe () :
    cmd = "\r"
    ser.write ( cmd.encode('ascii') )

    while True :
        c = ser.read().decode('ascii')
        if c == '>' :
            return True
        if len(c) == 0 :
            return False
        #print ( "probe, skip: ", c )

# This is not as robust as I would like.
def sync () :
    n = flush ();
    print ( n, " chars flushed" )

    for _ in range(10):
        x = probe ()
        if x == True :
            return
        print ( "Probe failed, try again" )

    print ( "Failed to find Callan" )
    exit ()

def dump () :
    n = 0
    while True :
        n += 1
        c = ser.read().decode('ascii')
        print ( "Dog: ", end='' )
        print ( n, end='' )
        print ( " ", end='' );
        print ( len(c), end='' )
        if len(c) != 1 :
            print ( '' )
            print ( "Timeout\n" );
            break
        print ( " ", end='' );
        cc = c[0]
        x = ord(cc)
        print ( hex(x), end='' )
        if x > 0x20 and x < 0x7f :
            print ( ' ', cc )
        print ( "" )


# We see
# >e a0
# 0000A0: 0020? .
# >
# Note that the characters we write are echoed

def examine ( addr ) :

    #cmd = "E a0\r"
    cmd = "E "
    cmd += format ( addr, 'x' )
    #print ( cmd )
    cmd += '\r.\r'
    ser.write ( cmd.encode('ascii') )

    flush_to ( '\n' )
    #dump ()
    raw = read_to ( '>' )
    # trim off "? .\r\n>
    res = raw[:-6]
    print ( res )

def peek ( addr ) :
    cmd = "E "
    cmd += format ( addr, 'x' )
    cmd += '\r.\r'
    ser.write ( cmd.encode('ascii') )

    flush_to ( '\n' )
    raw = read_to ( '>' )
    # trim off "? .\r\n>
    res = raw[:-6]
    w = res.split ( ": " )
    return int ( w[1], 16)

def poke ( addr, val ) :

    cmd = "E "
    cmd += format ( addr, 'x' )
    cmd += '\r'
    ser.write ( cmd.encode('ascii') )

    x = read_until ( "? " )
    #print ( "until: ", x )

    cmd = format ( val, 'x' )
    cmd += '\r.\r'
    ser.write ( cmd.encode('ascii') )
    x = read_until ( ">" )
    #print ( "until: ", x )

    #dump ()

    
def debug () :

    sync ()
    examine ( 0xa0 )
    examine ( 0xa2 )
    examine ( 0x3f00 )

    addr = 0xa2
    x = peek ( addr )
    print ( "peek: ",hex(addr), " ", hex(x) )

    print ( "Start poke --" )
    addr = 0x10000
    examine ( addr )
    poke ( addr, 0xabcd )
    examine ( addr )

def chug () :

    n = 0
    sync ()

    while True :
        n += 1
        print ( "{:5d} ".format(n), end='' )
        examine ( 0x100 )

def slug () :
    sync ()

    addr = 0
    while addr < 0x20000 :
        examine ( addr )
        addr += 0x1000

# This was used before we had S-record loading.
# It works, but is very slow.
# It uses poke to install the image.
def im_load_slow ( path, base ) :

    nb = os.stat ( path ).st_size
    print ( "Loading a ", nb, " byte image" )

    with open ( path, mode='rb') as file:
        image = file.read()
    #print ( len(image) )

    i = 0
    addr = base
    while i < nb :
        val = image[i]*256 + image[i+1]
        poke ( addr, val )
        i += 2
        addr += 2

    i = 0
    addr = base
    while i < nb :
        examine ( addr )
        addr += 2
        i += 2

#    print ( hex(image[0]) )
#    print ( hex(image[1]) )
#    val = image[0]*256 + image[1]
#    print ( hex(val) )

def go ( addr ) :

    cmd = "g "
    cmd += format ( addr, 'x' )
    cmd += '\r'
    ser.write ( cmd.encode('ascii') )

# for some reason, whenever I open the serial port I get a big bunch
# (like 260 or so) of trash characters.  So if I exit this and jump
# into picocom, I will get a bunch of rubbish.  Also sometimes the
# Callan also receives rubbish which kicks it into the weeds.
# Staying in one session and using this to watch the output avoids
# this unpleasant business
#
# I am suspicious that this is some bug in my USB to serial dongle.
# As long as I have the ttyUSB1 device open, either via picocom or
# this code, there is no problem.  But when I exit either, things
# go unstable, the Callan gets bombarded by all kinds of trash and
# sometimes the Fail light goes on after it reports some kind of
# abort.  Ultimately the ROM monitor should be immune to whatever
# rubbish comes its way, but it isn't.
#
# I see:
#  Abort at 200EF6
#  Abort at 200E34
#  Abort at 200EC8
#  Abort at 200E2C
#  Abort at 200EEA
# The ancient dongle I am using identifies itself as:
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: new full-speed USB device number 6 using ehci-pci
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: New USB device found, idVendor=0403, idProduct=6001, bcdDevice= 4.00
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: New USB device strings: Mfr=1, Product=2, SerialNumber=3
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: Product: usb serial converter
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: Manufacturer: FTDI
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: SerialNumber: FTC9S0QV
#  Feb 26 13:58:59 trona kernel: ftdi_sio 1-1.4:1.0: FTDI USB Serial Device converter detected
#  Feb 26 13:58:59 trona kernel: usb 1-1.4: Detected FT232BM
# While writing this, I switch to a different dongle:
#  Feb 26 14:01:13 trona kernel: usb 1-1.4: new full-speed USB device number 7 using ehci-pci
#  Feb 26 14:01:13 trona kernel: usb 1-1.4: New USB device found, idVendor=067b, idProduct=2303, bcdDevice= 3.00
#  Feb 26 14:01:13 trona kernel: usb 1-1.4: New USB device strings: Mfr=1, Product=2, SerialNumber=0
#  Feb 26 14:01:13 trona kernel: usb 1-1.4: Product: USB-Serial Controller
#  Feb 26 14:01:13 trona kernel: usb 1-1.4: Manufacturer: Prolific Technology Inc.
#  Feb 26 14:01:13 trona kernel: usbcore: registered new interface driver pl2303
#  Feb 26 14:01:13 trona kernel: usbserial: USB Serial support registered for pl2303
#  Feb 26 14:01:13 trona kernel: pl2303 1-1.4:1.0: pl2303 converter detected
#  Feb 26 14:01:13 trona kernel: usb 1-1.4: pl2303 converter now attached to ttyUSB1

def watch_it ( ignore_timeout ) :
    while True :
        c = ser.read()
        if len(c) == 0 :
            if ignore_timeout :
                continue
            else :
                break
        if c[0] >= 128 :
            continue
        print ( c.decode('ascii'), end='', flush=True )

def watch () :
    watch_it ( True )

# ------------------------------------------------------
# ------------------------------------------------------

# Here is a little terminal emulator
# 
# I first tried doing this with a thread to watch the keyboard
# and the mainline in a loop, blocked reading the serial input.
# This did not work.  I think it is a flaw in python-serial
# where the read on serial is blocking writes on serial.
# i.e. python-serial is not thread friendly.
#
# I discovered some code by "eRCaGuy" who wrote a python serial
# terminal gadget.  He also has a keyboard thread, but he does
# 2 extra things.
# - he sends keyboard input via a queue to the mainline
# - the mainline never blocks, but polls serial input
# polling is of course ugly and unfortunate, but with a
# sleep to make it sort of friendly, it works.

# Here is what does not work
def keyboard_thread_BAD () :
    print ( "KB start" )
    fd = sys.stdin.fileno()
    tty.setcbreak(fd)

    while True :
        c = sys.stdin.read(1)
        if c == '\n' :
            c = '\r'
        #print ( type(c) )
        print ( "Send: ", c, " hex = ", hex(ord(c[0])) )
        ser.write ( c.encode('ascii') )

def keyboard_thread () :

    # This really is not necessary
    kb_sem.wait ()
    kb_sem.clear ()

    while True :
        inp = input ()
        inQ.put ( inp )

# I really wanted to use filter, and went through a fair
# bit of trouble trying to figure out how to turn the
# filter iternator object back into a bytestring.
# but eventually abandoned this for what follows
def cleanup_FANCY ( line ) :
    xclean = filter(lambda x: x < 128 and x != ord('\r'), line)
    yclean = bytes(list(xclean))

# note that a python byte string is immutable,
# so we build a list, then convert it.
def cleanup ( line ) :
    clean = []

    for b in line :
        if b == 0 :
            continue
        if b > 127 :
            continue
        if b == ord('\r') :
            continue
        # if we don't do this, every newline
        # gets doubled by the write
        if b == ord('\n') :
            b = ord('\r')
        clean.append ( b )

    return bytes ( clean )

# ser.read() returns bytes
# filter returns some stupid filter iterable object
# after an hour of work we find (the admittedly simple)
# way to turn it back into bytes
# so we can feed it to decode
def terminal () :
    global inQ
    global kb_sem

    inQ = queue.Queue ()
    kb_sem = threading.Event ()

    #log = open ( "log.log", "w" )

    kb = threading.Thread ( target=keyboard_thread )
    kb.start ()

    kb_sem.set ()

    while True :
        ndata = ser.inWaiting ()
        if ndata > 0 :
            raw = ser.read ( ndata )
            yclean = cleanup ( raw )
            data = yclean.decode('ascii')

            #log_data = repr ( yclean )
            #log_data = repr ( data )
            #log.write ( log_data )
            #log.write ( "\n" )
            #log.flush ()

            print ( data, end='', flush=True )
        if inQ.qsize () > 0 :
            inp = inQ.get ()
            inp += '\r'
            enc = inp.encode('ascii')
            ser.write ( enc )
        time.sleep ( 0.02 )

# ------------------------------------------------------

def get_srec ( path, base ) :
    hbase = format ( base, 'x' )
    process = Popen(['./tos', path, hbase], stdout=PIPE )
    (out,err) = process.communicate()

    #print ( out.decode('ascii') )
    lines = out.decode('ascii').split('\r\n')

    # delete bogus blank line at end
    return lines[:-1]

def send_srec ( sline ) :
    sline += '\r'

    # A retry loop, just in case
    for _ in range(4):
        ser.write ( sline.encode('ascii') )
        #dump ()
        # As a response we get the echo, then
        # "02Y>" or some such.
        # The "Y" indicates success.
        resp = read_until ( '>' )
        if resp[-2] == 'Y' :
            break
        print ( "?", end='', flush=True )

# This downloads S records
def im_load ( path, base ) :
    sr = get_srec ( path, base )
    print ( "Loading ... ", end='', flush=True )
    for l in sr :
        send_srec ( l )
    print ( "Done" )


def run_image ( path, base ) :
    sync ()

    im_load ( path, base )
    go ( base )

# ------------------------------------------------------

first = "first.img"
base = 0x10000

#ser = serial.Serial ( device, baud, timeout=None )
ser = serial.Serial ( device, baud, timeout=2 )
print ( "Using port " + ser.name )
print ( " baud rate: {}".format(baud) )

#debug ()
#chug ()
#slug ()

#im_load ( first, base )

run_image ( first, base )
terminal ()

ser.close()

# THE END
